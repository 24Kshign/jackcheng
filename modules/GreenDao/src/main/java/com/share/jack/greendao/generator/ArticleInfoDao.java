package com.share.jack.greendao.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.share.jack.greendao.bean.ArticleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_INFO".
*/
public class ArticleInfoDao extends AbstractDao<ArticleInfo, Void> {

    public static final String TABLENAME = "ARTICLE_INFO";

    /**
     * Properties of entity ArticleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property ArticleTitle = new Property(1, String.class, "articleTitle", false, "ARTICLE_TITLE");
        public final static Property ArticleContent = new Property(2, String.class, "articleContent", false, "ARTICLE_CONTENT");
    }


    public ArticleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_INFO\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"ARTICLE_TITLE\" TEXT," + // 1: articleTitle
                "\"ARTICLE_CONTENT\" TEXT);"); // 2: articleContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(2, articleTitle);
        }
 
        String articleContent = entity.getArticleContent();
        if (articleContent != null) {
            stmt.bindString(3, articleContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String articleTitle = entity.getArticleTitle();
        if (articleTitle != null) {
            stmt.bindString(2, articleTitle);
        }
 
        String articleContent = entity.getArticleContent();
        if (articleContent != null) {
            stmt.bindString(3, articleContent);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ArticleInfo readEntity(Cursor cursor, int offset) {
        ArticleInfo entity = new ArticleInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // articleTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // articleContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticleTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticleContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ArticleInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ArticleInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ArticleInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
